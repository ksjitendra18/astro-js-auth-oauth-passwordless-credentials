---
import MainLayout from "../../layout/main-layout.astro";

import redis from "../../lib/redis";
import { EmailSchema } from "../../features/auth/validations/email";
import {
  checkAndAddLoginMethod,
  createUser,
  getUserByEmail,
} from "../../features/auth/services/user";
import { create2FASession } from "../../features/auth/services/two-factor";
import { createSession } from "../../features/auth/services/session";
import { createLoginLog } from "../../features/auth/services/logs";
import { AUTH_COOKIES } from "../../features/auth/constants";
let isBanned = false;
let serverError = false;
let error = false;
let success = false;

const isUserLoggedIn = !!Astro.locals.userId;
if (isUserLoggedIn) {
  return Astro.redirect("/dashboard");
}

const verificationData: string | null = await redis.get(
  Astro.params.verificationId!
);

if (!verificationData) {
  error = true;
} else {
  const [code, userEmail] = verificationData.split(":");
  const parsedData = EmailSchema.safeParse(userEmail);
  console.log(parsedData.error);

  if (!parsedData.success) {
    error = true;
    return;
  }
  success = true;

  try {
    const userInfo = await getUserByEmail({ email: parsedData.data });

    if (!userInfo) {
      const { userId } = await createUser({
        email: parsedData.data,
        fullName: "",
        profilePhoto: "",
        emailVerified: true,
        loginMethod: "magic_link",
      });

      const { sessionId, expiresAt } = await createSession({
        userId: userId,
      });

      await createLoginLog({
        sessionId,
        userAgent: Astro.request.headers.get("user-agent"),
        userId: userId,
        ip: Astro.clientAddress ?? "dev",
        strategy: "magic_link",
      });
      await redis.del(Astro.params.verificationId!);
      Astro.cookies.set(AUTH_COOKIES.SESSION_TOKEN, sessionId, {
        path: "/",
        httpOnly: true,
        sameSite: "lax",
        expires: expiresAt,
        secure: import.meta.env.PROD,
      });

      return Astro.redirect("/profile");
    }

    await checkAndAddLoginMethod({
      userId: userInfo.id,
      method: "magic_link",
    });

    if (userInfo.twoFactorEnabled) {
      const faSess = await create2FASession(userInfo.id);

      Astro.cookies.set(AUTH_COOKIES.LOGIN_METHOD, "magic_link", {
        path: "/",
        httpOnly: true,
        sameSite: "lax",
        secure: import.meta.env.PROD,
      });

      Astro.cookies.set(AUTH_COOKIES.TWO_FA_AUTH, faSess, {
        path: "/",
        httpOnly: true,
        sameSite: "lax",
        secure: import.meta.env.PROD,
      });
      return Astro.redirect("/verify-two-factor");
    }
    const { sessionId, expiresAt } = await createSession({
      userId: userInfo.id,
    });

    await createLoginLog({
      sessionId,
      userAgent: Astro.request.headers.get("user-agent"),
      userId: userInfo.id,
      ip: Astro.clientAddress ?? "dev",
      strategy: "magic_link",
    });

    Astro.cookies.set(AUTH_COOKIES.SESSION_TOKEN, sessionId, {
      path: "/",
      httpOnly: true,
      sameSite: "lax",
      expires: expiresAt,
      secure: import.meta.env.PROD,
    });

    await redis.del(Astro.params.verificationId!);

    return Astro.redirect("/dashboard");
  } catch (error) {
    console.log("Error in verifying magic link", error);
    serverError = true;
  }
}
---

<MainLayout title="Magic Link" description="Log in via magic link">
  {
    error && (
      <div class="my-10 flex items-center justify-center flex-col">
        <h2 class="text-3xl text-center font-bold">Invalid Link</h2>

        <p class="my-2">
          The link is invalid or expired. Please re-generate a new link.
        </p>
        <a
          href="/magic-link"
          class="px-5 py-3 my-5 bg-black text-white rounded-md"
        >
          Generate New Link
        </a>
      </div>
    )
  }

  {
    success && (
      <div class="my-10 flex flex-col items-center justify-center">
        <h2 class="text-3xl text-center font-bold">Login Success</h2>
        <p class="my-2">Redirecting...</p>
      </div>
    )
  }
  {
    isBanned && (
      <div class="my-10 flex flex-col items-center justify-center">
        <h2 class="text-3xl text-center font-bold">Access Restricted</h2>
        <p class="my-2">You have been banned. Please contact support.</p>
      </div>
    )
  }
  {
    serverError && (
      <div class="my-10 flex flex-col items-center justify-center">
        <h2 class="text-3xl text-center font-bold">Server Error</h2>
        <p class="my-2">Please try again later.</p>
      </div>
    )
  }
</MainLayout>
